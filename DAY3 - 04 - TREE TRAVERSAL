# include <stdio.h>
# include <conio.h>
# include <stdlib.h>
 
typedef struct BST {
   int data;
   struct BST *lchild, *rchild;
} node;
 
void insert(node *, node *);
void inorder(node *);
void preorder(node *);
void postorder(node *);
node *search(node *, int, node **);
 
int main() {
   int choice;
   char ans = 'N';
   int key;
   node *new_node, *root, *tmp, *parent;
   node *get_node();
   root = NULL;
   
 
   printf("\nProgram For Binary Search Tree ");
   do {
      printf("\n1.Create");
      printf("\n2.Search");
      printf("\n3.Recursive Traversals");
      printf("\n4.Exit");
      printf("\nEnter your choice :");
      scanf("%d", &choice);
 #include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*front,*rear,*temp,*front1;   int frontelement(); void enq(int data); void deq(); void empty(); void display(); void create(); void queuesize();   int count = 0;  int main() {     int no, ch, e;       printf("\n 1 - Enque");     printf("\n 2 - Deque");     printf("\n 3 - Front element");     printf("\n 4 - Empty");     printf("\n 5 - Exit");     printf("\n 6 - Display");     printf("\n 7 - Queue size");     create();     while (1)     {         printf("\n Enter choice : ");         scanf("%d", &ch);         switch (ch)         {         case 1:             printf("Enter data : ");             scanf("%d", &no);             enq(no);             break;         case 2:             deq();             break;         case 3:             e = frontelement();             if (e != 0)                 printf("Front element : %d", e);             else                 printf("\n No front element in Queue as queue is empty");             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             queuesize();             break;         default:             printf("Wrong choice, Please enter correct choice  ");             break;         }     } } void create() {     front = rear = NULL; } void queuesize() {     printf("\n Queue size : %d", count); }   void enq(int data) {     if (rear == NULL)     {         rear = (struct node *)malloc(1*sizeof(struct node));         rear->ptr = NULL;         rear->info = data;         front = rear;     }     else     {         temp=(struct node *)malloc(1*sizeof(struct node));         rear->ptr = temp;         temp->info = data;         temp->ptr = NULL;           rear = temp;     }     count++; } void display() {     front1 = front;       if ((front1 == NULL) && (rear == NULL))     {         printf("Queue is empty");         return;     }     while (front1 != rear)     {         printf("%d ", front1->info);         front1 = front1->ptr;     }     if (front1 == rear)         printf("%d", front1->info); } void deq() {     front1 = front;       if (front1 == NULL)     {         printf("\n Error: Trying to display elements from empty queue");         return;     }     else         if (front1->ptr != NULL)         {             front1 = front1->ptr;             printf("\n Dequed value : %d", front->info);             free(front);             front = front1;         }         else         {             printf("\n Dequed value : %d", front->info);             free(front);             front = NULL;             rear = NULL;         }         count--; } int frontelement() {     if ((front != NULL) && (rear != NULL))         return(front->info);     else         return
      switch (choice) {
      case 1:
         do {
            new_node = get_node();
            printf("\nEnter The Element ");#include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*front,*rear,*temp,*front1;   int frontelement(); void enq(int data); void deq(); void empty(); void display(); void create(); void queuesize();   int count = 0;  int main() {     int no, ch, e;       printf("\n 1 - Enque");     printf("\n 2 - Deque");     printf("\n 3 - Front element");     printf("\n 4 - Empty");     printf("\n 5 - Exit");     printf("\n 6 - Display");     printf("\n 7 - Queue size");     create();     while (1)     {         printf("\n Enter choice : ");         scanf("%d", &ch);         switch (ch)         {         case 1:             printf("Enter data : ");             scanf("%d", &no);             enq(no);             break;         case 2:             deq();             break;         case 3:             e = frontelement();             if (e != 0)                 printf("Front element : %d", e);             else                 printf("\n No front element in Queue as queue is empty");             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             queuesize();             break;         default:             printf("Wrong choice, Please enter correct choice  ");             break;         }     } } void create() {     front = rear = NULL; } void queuesize() {     printf("\n Queue size : %d", count); }   void enq(int data) {     if (rear == NULL)     {         rear = (struct node *)malloc(1*sizeof(struct node));         rear->ptr = NULL;         rear->info = data;         front = rear;     }     else     {         temp=(struct node *)malloc(1*sizeof(struct node));         rear->ptr = temp;         temp->info = data;         temp->ptr = NULL;           rear = temp;     }     count++; } void display() {     front1 = front;       if ((front1 == NULL) && (rear == NULL))     {         printf("Queue is empty");         return;     }     while (front1 != rear)     {         printf("%d ", front1->info);         front1 = front1->ptr;     }     if (front1 == rear)         printf("%d", front1->info); } void deq() {     front1 = front;       if (front1 == NULL)     {         printf("\n Error: Trying to display elements from empty queue");         return;     }     else         if (front1->ptr != NULL)         {             front1 = front1->ptr;             printf("\n Dequed value : %d", front->info);             free(front);             front = front1;         }         else         {             printf("\n Dequed value : %d", front->info);             free(front);             front = NULL;             rear = NULL;         }         count--; } int frontelement() {     if ((front != NULL) && (rear != NULL))         return(front->info);     else         return
            scanf("%d", &new_node->data);
 
            if (root == NULL) /* Tree is not Created */
               root = new_node;
            else
               insert(root, new_node);
 
            printf("\nWant To enter More Elements?(y/n)");
            ans = getch();
         } while (ans == 'y');
         break;
 
      case 2:
         printf("\nEnter Element to be searched :");
         scanf("%d", &key);
 
         tmp = search(root, key, &parent);#include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*front,*rear,*temp,*front1;   int frontelement(); void enq(int data); void deq(); void empty(); void display(); void create(); void queuesize();   int count = 0;  int main() {     int no, ch, e;       printf("\n 1 - Enque");     printf("\n 2 - Deque");     printf("\n 3 - Front element");     printf("\n 4 - Empty");     printf("\n 5 - Exit");     printf("\n 6 - Display");     printf("\n 7 - Queue size");     create();     while (1)     {         printf("\n Enter choice : ");         scanf("%d", &ch);         switch (ch)         {         case 1:             printf("Enter data : ");             scanf("%d", &no);             enq(no);             break;         case 2:             deq();             break;         case 3:             e = frontelement();             if (e != 0)                 printf("Front element : %d", e);             else                 printf("\n No front element in Queue as queue is empty");             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             queuesize();             break;         default:             printf("Wrong choice, Please enter correct choice  ");             break;         }     } } void create() {     front = rear = NULL; } void queuesize() {     printf("\n Queue size : %d", count); }   void enq(int data) {     if (rear == NULL)     {         rear = (struct node *)malloc(1*sizeof(struct node));         rear->ptr = NULL;         rear->info = data;         front = rear;     }     else     {         temp=(struct node *)malloc(1*sizeof(struct node));         rear->ptr = temp;         temp->info = data;         temp->ptr = NULL;           rear = temp;     }     count++; } void display() {     front1 = front;       if ((front1 == NULL) && (rear == NULL))     {         printf("Queue is empty");         return;     }     while (front1 != rear)     {         printf("%d ", front1->info);         front1 = front1->ptr;     }     if (front1 == rear)         printf("%d", front1->info); } void deq() {     front1 = front;       if (front1 == NULL)     {         printf("\n Error: Trying to display elements from empty queue");         return;     }     else         if (front1->ptr != NULL)         {             front1 = front1->ptr;             printf("\n Dequed value : %d", front->info);             free(front);             front = front1;         }         else         {             printf("\n Dequed value : %d", front->info);             free(front);             front = NULL;             rear = NULL;         }         count--; } int frontelement() {     if ((front != NULL) && (rear != NULL))         return(front->info);     else         return
         printf("\nParent of node %d is %d", tmp->data, parent->data);
         break;
 
      case 3:
         if (root == NULL)
            printf("Tree Is Not Created");#include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*front,*rear,*temp,*front1;   int frontelement(); void enq(int data); void deq(); void empty(); void display(); void create(); void queuesize();   int count = 0;  int main() {     int no, ch, e;       printf("\n 1 - Enque");     printf("\n 2 - Deque");     printf("\n 3 - Front element");     printf("\n 4 - Empty");     printf("\n 5 - Exit");     printf("\n 6 - Display");     printf("\n 7 - Queue size");     create();     while (1)     {         printf("\n Enter choice : ");         scanf("%d", &ch);         switch (ch)         {         case 1:             printf("Enter data : ");             scanf("%d", &no);             enq(no);             break;         case 2:             deq();             break;         case 3:             e = frontelement();             if (e != 0)                 printf("Front element : %d", e);             else                 printf("\n No front element in Queue as queue is empty");             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             queuesize();             break;         default:             printf("Wrong choice, Please enter correct choice  ");             break;         }     } } void create() {     front = rear = NULL; } void queuesize() {     printf("\n Queue size : %d", count); }   void enq(int data) {     if (rear == NULL)     {         rear = (struct node *)malloc(1*sizeof(struct node));         rear->ptr = NULL;         rear->info = data;         front = rear;     }     else     {         temp=(struct node *)malloc(1*sizeof(struct node));         rear->ptr = temp;         temp->info = data;         temp->ptr = NULL;           rear = temp;     }     count++; } void display() {     front1 = front;       if ((front1 == NULL) && (rear == NULL))     {         printf("Queue is empty");         return;     }     while (front1 != rear)     {         printf("%d ", front1->info);         front1 = front1->ptr;     }     if (front1 == rear)         printf("%d", front1->info); } void deq() {     front1 = front;       if (front1 == NULL)     {         printf("\n Error: Trying to display elements from empty queue");         return;     }     else         if (front1->ptr != NULL)         {             front1 = front1->ptr;             printf("\n Dequed value : %d", front->info);             free(front);             front = front1;         }         else         {             printf("\n Dequed value : %d", front->info);             free(front);             front = NULL;             rear = NULL;         }         count--; } int frontelement() {     if ((front != NULL) && (rear != NULL))         return(front->info);     else         return#include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*front,*rear,*temp,*front1;   int frontelement(); void enq(int data); void deq(); void empty(); void display(); void create(); void queuesize();   int count = 0;  int main() {     int no, ch, e;       printf("\n 1 - Enque");     printf("\n 2 - Deque");     printf("\n 3 - Front element");     printf("\n 4 - Empty");     printf("\n 5 - Exit");     printf("\n 6 - Display");     printf("\n 7 - Queue size");     create();     while (1)     {         printf("\n Enter choice : ");         scanf("%d", &ch);         switch (ch)         {         case 1:             printf("Enter data : ");             scanf("%d", &no);             enq(no);             break;         case 2:             deq();             break;         case 3:             e = frontelement();             if (e != 0)                 printf("Front element : %d", e);             else                 printf("\n No front element in Queue as queue is empty");             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             queuesize();             break;         default:             printf("Wrong choice, Please enter correct choice  ");             break;         }     } } void create() {     front = rear = NULL; } void queuesize() {     printf("\n Queue size : %d", count); }   void enq(int data) {     if (rear == NULL)     {         rear = (struct node *)malloc(1*sizeof(struct node));         rear->ptr = NULL;         rear->info = data;         front = rear;     }     else     {         temp=(struct node *)malloc(1*sizeof(struct node));         rear->ptr = temp;         temp->info = data;         temp->ptr = NULL;           rear = temp;     }     count++; } void display() {     front1 = front;       if ((front1 == NULL) && (rear == NULL))     {         printf("Queue is empty");         return;     }     while (front1 != rear)     {         printf("%d ", front1->info);         front1 = front1->ptr;     }     if (front1 == rear)         printf("%d", front1->info); } void deq() {     front1 = front;       if (front1 == NULL)     {         printf("\n Error: Trying to display elements from empty queue");         return;     }     else         if (front1->ptr != NULL)         {             front1 = front1->ptr;             printf("\n Dequed value : %d", front->info);             free(front);             front = front1;         }         else         {             printf("\n Dequed value : %d", front->info);             free(front);             front = NULL;             rear = NULL;         }         count--; } int frontelement() {     if ((front != NULL) && (rear != NULL))         return(front->info);     else         return
         else {
            printf("\nThe Inorder display : ");
            inorder(root);
            printf("\nThe Preorder display : ");#include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*front,*rear,*temp,*front1;   int frontelement(); void enq(int data); void deq(); void empty(); void display(); void create(); void queuesize();   int count = 0;  int main() {     int no, ch, e;       printf("\n 1 - Enque");     printf("\n 2 - Deque");     printf("\n 3 - Front element");     printf("\n 4 - Empty");     printf("\n 5 - Exit");     printf("\n 6 - Display");     printf("\n 7 - Queue size");     create();     while (1)     {         printf("\n Enter choice : ");         scanf("%d", &ch);         switch (ch)         {         case 1:             printf("Enter data : ");             scanf("%d", &no);             enq(no);             break;         case 2:             deq();             break;         case 3:             e = frontelement();             if (e != 0)                 printf("Front element : %d", e);             else                 printf("\n No front element in Queue as queue is empty");             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             queuesize();             break;         default:             printf("Wrong choice, Please enter correct choice  ");             break;         }     } } void create() {     front = rear = NULL; } void queuesize() {     printf("\n Queue size : %d", count); }   void enq(int data) {     if (rear == NULL)     {         rear = (struct node *)malloc(1*sizeof(struct node));         rear->ptr = NULL;         rear->info = data;         front = rear;     }     else     {         temp=(struct node *)malloc(1*sizeof(struct node));         rear->ptr = temp;         temp->info = data;         temp->ptr = NULL;           rear = temp;     }     count++; } void display() {     front1 = front;       if ((front1 == NULL) && (rear == NULL))     {         printf("Queue is empty");         return;     }     while (front1 != rear)     {         printf("%d ", front1->info);         front1 = front1->ptr;     }     if (front1 == rear)         printf("%d", front1->info); } void deq() {     front1 = front;       if (front1 == NULL)     {         printf("\n Error: Trying to display elements from empty queue");         return;     }     else         if (front1->ptr != NULL)         {             front1 = front1->ptr;             printf("\n Dequed value : %d", front->info);             free(front);             front = front1;         }         else         {             printf("\n Dequed value : %d", front->info);             free(front);             front = NULL;             rear = NULL;         }         count--; } int frontelement() {     if ((front != NULL) && (rear != NULL))         return(front->info);     else         return
            preorder(root);
            printf("\nThe Postorder display : ");
            postorder(root);
         }
         break;
      }
   } while (choice != 4);
}
/*
 Get new Node
 */#include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*front,*rear,*temp,*front1;   int frontelement(); void enq(int data); void deq(); void empty(); void display(); void create(); void queuesize();   int count = 0;  int main() {     int no, ch, e;       printf("\n 1 - Enque");     printf("\n 2 - Deque");     printf("\n 3 - Front element");     printf("\n 4 - Empty");     printf("\n 5 - Exit");     printf("\n 6 - Display");     printf("\n 7 - Queue size");     create();     while (1)     {         printf("\n Enter choice : ");         scanf("%d", &ch);         switch (ch)         {         case 1:             printf("Enter data : ");             scanf("%d", &no);             enq(no);             break;         case 2:             deq();             break;         case 3:             e = frontelement();             if (e != 0)                 printf("Front element : %d", e);             else                 printf("\n No front element in Queue as queue is empty");             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             queuesize();             break;         default:             printf("Wrong choice, Please enter correct choice  ");             break;         }     } } void create() {     front = rear = NULL; } void queuesize() {     printf("\n Queue size : %d", count); }   void enq(int data) {     if (rear == NULL)     {         rear = (struct node *)malloc(1*sizeof(struct node));         rear->ptr = NULL;         rear->info = data;         front = rear;     }     else     {         temp=(struct node *)malloc(1*sizeof(struct node));         rear->ptr = temp;         temp->info = data;         temp->ptr = NULL;           rear = temp;     }     count++; } void display() {     front1 = front;       if ((front1 == NULL) && (rear == NULL))     {         printf("Queue is empty");         return;     }     while (front1 != rear)     {         printf("%d ", front1->info);         front1 = front1->ptr;     }     if (front1 == rear)         printf("%d", front1->info); } void deq() {     front1 = front;       if (front1 == NULL)     {         printf("\n Error: Trying to display elements from empty queue");         return;     }     else         if (front1->ptr != NULL)         {             front1 = front1->ptr;             printf("\n Dequed value : %d", front->info);             free(front);             front = front1;         }         else         {             printf("\n Dequed value : %d", front->info);             free(front);             front = NULL;             rear = NULL;         }         count--; } int frontelement() {     if ((front != NULL) && (rear != NULL))         return(front->info);     else         return
node *get_node() {
   node *temp;
   temp = (node *) malloc(sizeof(node));
   temp->lchild = NULL;
   temp->rchild = NULL;
   return temp;
}
/*
 This function is for creating a binary search tree
 */
void insert(node *root, node *new_node) {
   if (new_node->data < root->data) {
      if (root->lchild == NULL)
         root->lchild = new_node;
      else
         insert(root->lchild, new_node);
   }
 
   if (new_node->data > root->data) {
      if (root->rchild == NULL)
         root->rchild = new_node;
      else
         insert(root->rchild, new_node);
   }
}
/*
 This function is for searching the node from
 binary Search Tree
 */
node *search(node *root, int key, node **parent) {
   node *temp;
   temp = root;
   while (temp != NULL) {
      if (temp->data == key) {
         printf("\nThe %d Element is Present", temp->data);
         return temp;
      }
      *parent = temp;
 
      if (temp->data > key)
         temp = temp->lchild;
      else
         temp = temp->rchild;
   }
   return NULL;
}
/*
 This function displays the tree in inorder fashion
 */
void inorder(node *temp) {
   if (temp != NULL) {
      inorder(temp->lchild);
      printf("%#include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*front,*rear,*temp,*front1;   int frontelement(); void enq(int data); void deq(); void empty(); void display(); void create(); void queuesize();   int count = 0;  int main() {     int no, ch, e;       printf("\n 1 - Enque");     printf("\n 2 - Deque");     printf("\n 3 - Front element");     printf("\n 4 - Empty");     printf("\n 5 - Exit");     printf("\n 6 - Display");     printf("\n 7 - Queue size");     create();     while (1)     {         printf("\n Enter choice : ");         scanf("%d", &ch);         switch (ch)         {         case 1:             printf("Enter data : ");             scanf("%d", &no);             enq(no);             break;         case 2:             deq();             break;         case 3:             e = frontelement();             if (e != 0)                 printf("Front element : %d", e);             else                 printf("\n No front element in Queue as queue is empty");             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             queuesize();             break;         default:             printf("Wrong choice, Please enter correct choice  ");             break;         }     } } void create() {     front = rear = NULL; } void queuesize() {     printf("\n Queue size : %d", count); }   void enq(int data) {     if (rear == NULL)     {         rear = (struct node *)malloc(1*sizeof(struct node));         rear->ptr = NULL;         rear->info = data;         front = rear;     }     else     {         temp=(struct node *)malloc(1*sizeof(struct node));         rear->ptr = temp;         temp->info = data;         temp->ptr = NULL;           rear = temp;     }     count++; } void display() {     front1 = front;       if ((front1 == NULL) && (rear == NULL))     {         printf("Queue is empty");         return;     }     while (front1 != rear)     {         printf("%d ", front1->info);         front1 = front1->ptr;     }     if (front1 == rear)         printf("%d", front1->info); } void deq() {     front1 = front;       if (front1 == NULL)     {         printf("\n Error: Trying to display elements from empty queue");         return;     }     else         if (front1->ptr != NULL)         {             front1 = front1->ptr;             printf("\n Dequed value : %d", front->info);             free(front);             front = front1;         }         else         {             printf("\n Dequed value : %d", front->info);             free(front);             front = NULL;             rear = NULL;         }         count--; } int frontelement() {     if ((front != NULL) && (rear != NULL))         return(front->info);     else         returnd", temp->data);
      inorder(temp->rchild);
   }
}
/*
 This function displays the tree in preorder fashion
 */
void preorder(node *temp) {
   if (temp != NULL) {
      printf("%d", temp->data);
      preorder(temp->lchild);
      preorder(temp->rchild);
   }
}#include <stdio.h> #include <stdlib.h>   struct node {     int info;     struct node *ptr; }*front,*rear,*temp,*front1;   int frontelement(); void enq(int data); void deq(); void empty(); void display(); void create(); void queuesize();   int count = 0;  int main() {     int no, ch, e;       printf("\n 1 - Enque");     printf("\n 2 - Deque");     printf("\n 3 - Front element");     printf("\n 4 - Empty");     printf("\n 5 - Exit");     printf("\n 6 - Display");     printf("\n 7 - Queue size");     create();     while (1)     {         printf("\n Enter choice : ");         scanf("%d", &ch);         switch (ch)         {         case 1:             printf("Enter data : ");             scanf("%d", &no);             enq(no);             break;         case 2:             deq();             break;         case 3:             e = frontelement();             if (e != 0)                 printf("Front element : %d", e);             else                 printf("\n No front element in Queue as queue is empty");             break;         case 4:             empty();             break;         case 5:             exit(0);         case 6:             display();             break;         case 7:             queuesize();             break;         default:             printf("Wrong choice, Please enter correct choice  ");             break;         }     } } void create() {     front = rear = NULL; } void queuesize() {     printf("\n Queue size : %d", count); }   void enq(int data) {     if (rear == NULL)     {         rear = (struct node *)malloc(1*sizeof(struct node));         rear->ptr = NULL;         rear->info = data;         front = rear;     }     else     {         temp=(struct node *)malloc(1*sizeof(struct node));         rear->ptr = temp;         temp->info = data;         temp->ptr = NULL;           rear = temp;     }     count++; } void display() {     front1 = front;       if ((front1 == NULL) && (rear == NULL))     {         printf("Queue is empty");         return;     }     while (front1 != rear)     {         printf("%d ", front1->info);         front1 = front1->ptr;     }     if (front1 == rear)         printf("%d", front1->info); } void deq() {     front1 = front;       if (front1 == NULL)     {         printf("\n Error: Trying to display elements from empty queue");         return;     }     else         if (front1->ptr != NULL)         {             front1 = front1->ptr;             printf("\n Dequed value : %d", front->info);             free(front);             front = front1;         }         else         {             printf("\n Dequed value : %d", front->info);             free(front);             front = NULL;             rear = NULL;         }         count--; } int frontelement() {     if ((front != NULL) && (rear != NULL))         return(front->info);     else         return
 
/*
 This function displays the tree in postorder fashion
 */
void postorder(node *temp) {
   if (temp != NULL) {
      postorder(temp->lchild);
      postorder(temp->rchild);
      printf("%d", temp->data);
   }
}
